name: 'Palladio Build Pipeline'
on:
  workflow_call:
    inputs:
        build-repository: #
          description: 'Repository to build'
          type: string
          required: false
          default:  ${{ github.repository }}
        use-display-output: # 
          description: 'If display output is needed for ui tesing'
          type: boolean
          required: false
          default: false
        deploy-updatesite: # 
          description: 'Updatesite for deployment. If empty deployment is skipped'
          type: string
          required: false
          default: ''
        skip-branch-deploy: # 
          description: 'Skip deployment of branches, default true'
          type: boolean
          required: false
          default: true
        java-version: # 
          description: 'Java version for build. Default 17'
          type: number
          required: false
          default: 17
        runner-label: # 
          description: 'Different runner tags'
          type: string
          required: false
          default: 'self-hosted'
        no-caching: # 
         description: 'Skips caching of maven artifacts'
         type: boolean
         required: false
         default: false
        release-version: # 
          description: 'If a release version is set, the build artifact will be deployed as a release of the corresponding version'
          type: string
          required: false
          default: '0.0.0'
    secrets:
        SERVER_SSH_KEY: # 
          description: 'SSH Key for deployment'
          required: true
        REMOTE_HOST:
          description: 'Remote host ip'
          required: true
        REMOTE_PORT:
          description: 'Remote host port'
          required: true
        REMOTE_USER:
          description: 'Remote host user'
          required: true
        REMOTE_TARGET:
          description: 'Remote host target path'
          required: true

jobs:
  build_pre_job:
    #still run this on self-hosted
    runs-on: ${{ inputs.runner-label }}
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content_newer'
          do_not_skip: '["workflow_dispatch", "schedule"]'
  
  build:
    needs: build_pre_job
    if: ${{ needs.build_pre_job.outputs.should_skip != 'true' }}
    name: "Build Palladio Artifact"
    runs-on: ${{ inputs.runner-label }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.build-repository }}
        submodules: true
      
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ inputs.java-version }}
    
    - name: Cache local Maven repository
      if: ${{ inputs.no-caching == false }}
      continue-on-error: true
      timeout-minutes: 15
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: palladio-maven-java-${{ inputs.java-version }}
        restore-keys: |
          palladio-maven-java-${{ inputs.java-version }}
      
    - name: Verify with Maven
      shell: bash
      run: |
        if ${{ inputs.use-display-output }}; then
            DISPLAY=:0 mvn clean verify
        else
            mvn clean verify
        fi
      
    - name: Check deployment
      shell: bash
      run: |
        if ${{ github.event_name != 'pull_request' }} && ${{ github.ref_type == 'branch' }} && ${{ inputs.deploy-updatesite != '' }}
        then
            if ${{ github.ref_name == 'master' }} || ${{ github.ref_name == 'main' }} || ${{ inputs.skip-branch-deploy == false }} 
            then
                echo "SKIP_DEPLOY=false" >> $GITHUB_ENV
            else 
                echo "SKIP_DEPLOY=true" >> $GITHUB_ENV
            fi
        else
            echo "SKIP_DEPLOY=true" >> $GITHUB_ENV
        fi
      
    - name: Create folder name
      if: ${{ env.SKIP_DEPLOY != 'true' }}
      shell: bash
      run: echo "DEPLOY_FOLDER=$( echo ${{ inputs.build-repository }} | cut -d'/' -f2 | sed -e 's/\(.*\)/\L\1/' )" >> $GITHUB_ENV
      
    - name: Create project deployment path
      if: ${{ env.SKIP_DEPLOY != 'true' }}
      shell: bash
      run: echo "PROJECT_DEPLOY_PATH=$( echo '${{ secrets.REMOTE_TARGET}}/${{ env.DEPLOY_FOLDER }}' )" >> $GITHUB_ENV
      
    - name: Create Deployment Path
      if: ${{ env.SKIP_DEPLOY != 'true' }}
      shell: bash
      run: |
        if ${{ inputs.release-version != '0.0.0' }}
        then
            echo "REMOTE_PATH=$( echo '${{ env.PROJECT_DEPLOY_PATH }}/releases/${{ inputs.release-version }}' )" >> $GITHUB_ENV
        else
            if ${{ github.ref_name == 'master' }} || ${{ github.ref_name == 'main' }} 
            then
                echo "REMOTE_PATH=$( echo '${{ env.PROJECT_DEPLOY_PATH }}/nightly' )" >> $GITHUB_ENV
            else
                echo "REMOTE_PATH=$( echo '${{ env.PROJECT_DEPLOY_PATH }}/branches/${{ github.ref_name }}' )" >> $GITHUB_ENV
            fi
        fi

    - name: Deploy to Updatesite
      if: ${{ env.SKIP_DEPLOY != 'true' }}
      uses: PalladioSimulator/Palladio-Build-ActionsPipeline-Deployment@v2
      with:
        remote-user: ${{ secrets.REMOTE_USER }}
        remote-host: ${{ secrets.REMOTE_HOST }}
        remote-port: ${{ secrets.REMOTE_PORT }}
        server-ssh-key: ${{ secrets.SERVER_SSH_KEY }}
        local-source: './${{ inputs.deploy-updatesite }}/*'
        remote-target: ${{ env.REMOTE_PATH }}
        release-version: ${{ inputs.release-version }}
        link-path: ${{ env.PROJECT_DEPLOY_PATH }}
        
