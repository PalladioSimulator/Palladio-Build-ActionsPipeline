name: 'Palladio Build Pipeline'
description: 'Build of Palladio Project'
inputs:
  server-ssh-key: # 
    description: 'SSH Key for deployment'
    required: true
    default: ''
  remote-host:
    description: 'Remote host ip'
    required: true
    default: ''
  remote-port:
    description: 'Remote host port'
    required: true
    default: ''
  remote-user:
    description: 'Remote host user'
    required: true
    default: ''
  remote-target:
    description: 'Remote host target path'
    required: true
    default: ''
  build-repository: # id of input
    description: 'Repository to build'
    required: false
    default:  ${{ github.repository }}
  use-display-output: # 
    description: 'If display output is needed for ui tesing'
    required: false
    default: false
  deploy-updatesite: # 
    description: 'Updatesite for deployment. If empty deployment is skipped'
    required: false
    default: ''
  skip-branch-deploy: # 
    description: 'Skip deployment of branches, default true'
    required: false
    default: true
  java-version: # 
    description: 'Java version for build. Default 11'
    required: false
    default: '11'

runs:
  using: "composite"
  steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.build-repository }}
          submodules: true
      - name: Set up JDK
        uses: actions/setup-java@v3.4.1
        with:
          distribution: 'zulu'
          java-version: ${{ inputs.java-version }}
          cache: 'maven'
      - name: Verify with Maven
        shell: bash
        run: |
          if ${{ inputs.use-display-output }}; then
              DISPLAY=:0 mvn clean verify
          else
              mvn clean verify
          fi
      - name: Check deployment
        shell: bash
        run: |
          if ${{ github.event_name != 'pull_request' }} && ${{ github.ref_type == 'branch' }} && ${{ inputs.deploy-updatesite != '' }}
          then
              if ${{ github.ref_name == 'master' }} || ${{ github.ref_name == 'main' }} || ${{ inputs.skip-branch-deploy == 'false' }} 
              then
                  echo "DEPLOY_UPDATESITE=true" >> $GITHUB_ENV
              else 
                  echo "DEPLOY_UPDATESITE=false" >> $GITHUB_ENV
              fi
          else
              echo "DEPLOY_UPDATESITE=false" >> $GITHUB_ENV
          fi

      - name: Create folder name
        if: ${{ env.DEPLOY_UPDATESITE == 'true' }}
        shell: bash
        run: echo "DEPLOY_FOLDER=$( echo ${{ inputs.build-repository }} | cut -d'/' -f2 | sed -e 's/\(.*\)/\L\1/' )" >> $GITHUB_ENV
      - name: Create project deployment path
        if: ${{ env.DEPLOY_UPDATESITE == 'true' }}
        shell: bash
        run: echo "PROJECT_DEPLOY_PATH=$( echo '${{ inputs.remote-target}}/${{ env.DEPLOY_FOLDER }}' )" >> $GITHUB_ENV
      - name: Create Deployment Path
        if: ${{ env.DEPLOY_UPDATESITE == 'true' }}
        shell: bash
        run: |
          if ${{ github.ref_name == 'master' }} || ${{ github.ref_name == 'main' }} 
          then
              echo "REMOTE_PATH=$( echo '${{ env.PROJECT_DEPLOY_PATH }}/nightly' )" >> $GITHUB_ENV
          else
              echo "REMOTE_PATH=$( echo '${{ env.PROJECT_DEPLOY_PATH }}/branches/${{ github.ref_name }}' )" >> $GITHUB_ENV
          fi
      - name: Deploy to Updatesite
        if: ${{ env.DEPLOY_UPDATESITE == 'true' }}
        uses: PalladioSimulator/Palladio-Build-ActionsPipeline-Deployment@v1
        with:
          remote-user: ${{ inputs.remote-user }}
          remote-host: ${{ inputs.remote-host }}
          remote-port: ${{ inputs.remote-port }}
          server-ssh-key: ${{ inputs.server-ssh-key }}
          local-source: './${{ inputs.deploy-updatesite }}/*'
          remote-target: ${{ env.REMOTE_PATH }}
